// SPDX-License-Identifier: agpl-3.0
pragma solidity 0.7.6;

import {SafeMath} from "@openzeppelin/contracts/math/SafeMath.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import {IStakingPool} from "./interfaces/IStakingPool.sol";
import {IAToken} from "./interfaces/IAToken.sol";
import {WadRayMath} from "./libraries/WadRayMath.sol";
import {Errors} from "./libraries/Errors.sol";
import {IncentivizedERC20} from "./IncentivizedERC20.sol";

/**
 * @dev Implementation of the interest bearing token
 */

contract ATokenMock is IncentivizedERC20, IAToken {
  using WadRayMath for uint256;
  using SafeMath for uint256;
  using SafeERC20 for IERC20;

  address internal mintableERC20;
  IStakingPool internal pool;
  address public StakingPoolAddress;

  string private tokenname;
  string private tokensymbol;
  uint8 private tokendecimals;

  constructor(
    string memory name_,
    string memory symbol_,
    uint8 decimals_,
    address mintableERC20_
  ) {
    tokenname = name_;
    tokensymbol = symbol_;
    tokendecimals = decimals_;

    require(mintableERC20_ != address(0), "ATokenMock: mintableERC20 address is the zero address");
    mintableERC20 = mintableERC20_;
  }

  modifier onlyStakingPool {
    require(msg.sender == StakingPoolAddress, Errors.CT_CALLER_MUST_BE_LENDING_POOL);
    _;
  }

  /**
   * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`
   * - Only callable by the StakingPool, as extra state updates there need to be managed
   * @param user The owner of the aTokens, getting them burned
   * @param receiverOfUnderlying The address that will receive the underlying
   * @param amount The amount being burned
   * @param index The new liquidity index of the reserve
   **/
  function burn(
    address user,
    address receiverOfUnderlying,
    uint256 amount,
    uint256 index
  ) external override onlyStakingPool {
    uint256 amountScaled = amount.rayDiv(index);
    require(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);
    _burn(user, amountScaled);

    IERC20(mintableERC20).safeTransfer(receiverOfUnderlying, amount);

    emit Transfer(user, address(0), amount);
    emit Burn(user, receiverOfUnderlying, amount, index);
  }

  /**
   * @dev Mints `amount` aTokens to `user`
   * - Only callable by the StakingPool, as extra state updates there need to be managed
   * @param user The address receiving the minted tokens
   * @param amount The amount of tokens getting minted
   * @param index The new liquidity index of the reserve
   * @return `true` if the the previous balance of the user was 0
   */
  function mint(
    address user,
    uint256 amount,
    uint256 index
  ) external override onlyStakingPool returns (bool) {
    uint256 previousBalance = super.balanceOf(user);
    uint256 amountScaled = amount.rayDiv(index);
    require(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);
    _mint(user, amountScaled);

    emit Transfer(address(0), user, amount);
    emit Mint(user, amount, index);

    return previousBalance == 0;
  }

  /**
   * @dev Calculates the balance of the user: principal balance + interest generated by the principal
   * @param user The user whose balance is calculated
   * @return The balance of the user
   **/
  function balanceOf(address user)
    public
    view
    override(IncentivizedERC20, IERC20)
    returns (uint256)
  {
    return super.balanceOf(user).rayMul(pool.getReserveNormalizedIncome(mintableERC20));
  }

  /**
   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the
   * updated stored balance divided by the reserve's liquidity index at the moment of the update
   * @param user The user whose balance is calculated
   * @return The scaled balance of the user
   **/
  function scaledBalanceOf(address user) external view override returns (uint256) {
    return super.balanceOf(user);
  }

  /**
   * @dev Returns the scaled balance of the user and the scaled total supply.
   * @param user The address of the user
   * @return The scaled balance of the user
   * @return The scaled balance and the scaled total supply
   **/
  function getScaledUserBalanceAndSupply(address user)
    external
    view
    override
    returns (uint256, uint256)
  {
    return (super.balanceOf(user), super.totalSupply());
  }

  /**
   * @dev calculates the total supply of the specific aToken
   * since the balance of every single user increases over time, the total supply
   * does that too.
   * @return the current total supply
   **/
  function totalSupply() public view override(IncentivizedERC20, IERC20) returns (uint256) {
    uint256 currentSupplyScaled = super.totalSupply();
    if (currentSupplyScaled == 0) {
      return 0;
    }

    return currentSupplyScaled.rayMul( pool.getReserveNormalizedIncome(mintableERC20));
  }

  /**
   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)
   * @return the scaled total supply
   **/
  function scaledTotalSupply() external view virtual override returns (uint256) {
    return super.totalSupply();
  }

  /**
   * @return The name of the token
   **/
  function name() external view returns (string memory) {
    return tokenname;
  }

  /**
   * @return The symbol of the token
   **/
  function symbol() external view returns (string memory) {
    return tokensymbol;
  }

  /**
   * @return The decimals of the token
   **/
  function decimals() external view override returns (uint8) {
    return tokendecimals;
  }

  function setdecimals(uint8 decimal) external override {
    tokendecimals = decimal;
  }

  function setStakingPoolAddress(address StakingPool) external {
    require(StakingPool != address(0), "ATokenMock: StakingPool address is the zero address");
    StakingPoolAddress = StakingPool;
    pool = IStakingPool(StakingPoolAddress);
  }
}
